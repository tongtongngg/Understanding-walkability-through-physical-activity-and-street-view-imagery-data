import mercantile
import mapbox_vector_tile
import requests
import json
import os
import pandas as pd
from vt2geojson.tools import vt_bytes_to_geojson
from IPython.display import HTML, display
import folium


# vector tile endpoints -- change this in the API request to reference the correct endpoint
tile_coverage = 'mly1_public'

# tile layer depends which vector tile endpoints: 
# 1. if map features or traffic signs, it will be "point" always
# 2. if looking for coverage, it will be "image" for points, "sequence" for lines, or "overview" for far zoom
tile_layer = "image"

# Mapillary access token -- user should provide their own
access_token = 'MLY|5652096898253217|954722f6082bab20a3dfe6df116d6d44'

# KBH + AMAGER : [12.436781, 55.545432, 12.696966, 55.731815]
# AMAGER : [12.549625, 55.590588, 12.641862, 55.673604]

# a bounding box in [east_lng,_south_lat,west_lng,north_lat] format
west, south, east, north = [12.436781, 55.545432, 12.696966, 55.731815]


# get the list of tiles with x and y coordinates which intersect our bounding box
# MUST be at zoom level 14 where the data is available, other zooms currently not supported
tiles = list(mercantile.tiles(west, south, east, north, 14))

# create a list to store image locations
image_locations = []

# loop through list of tiles to get tile z/x/y to plug in to Mapillary endpoints and make request
for tile in tiles:
    tile_url = 'https://tiles.mapillary.com/maps/vtp/{}/2/{}/{}/{}?access_token={}'.format(tile_coverage,tile.z,tile.x,tile.y,access_token)
    response = requests.get(tile_url)
    data = vt_bytes_to_geojson(response.content, tile.x, tile.y, tile.z,layer=tile_layer)

    # loop through the features in the data to extract the image IDs and locations
    for feature in data['features']:

        # get lng,lat of each feature
        lng = feature['geometry']['coordinates'][0]
        lat = feature['geometry']['coordinates'][1]

        # ensure feature falls inside bounding box since tiles can extend beyond
        if lng > west and lng < east and lat > south and lat < north:

            # get the image ID and add it to the feature properties
            image_id = feature['properties']['id']

            # add the location to the feature properties
            location = {
                'lat': lat,
                'lng': lng,
                
            }

            # append the image ID and location to the list of image locations
            image_locations.append({'image_id': image_id, 'lat': lat, 'lng': lng,})

# convert the list of image locations to a Pandas DataFrame
image_locations_df = pd.DataFrame(image_locations)

# save the image locations to a CSV file
image_locations_df.to_csv('image_locations.csv', index=False)

print(image_locations_df.head())
print(image_locations_df.shape)